datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch", "fullTextIndex"]
}

model Licenses {
  id             Int       @id @default(autoincrement())
  max_users      Int
  responsible_id Int       @unique
  created_at     DateTime? @default(now())
  updated_at     DateTime? @updatedAt

  Users  Users[]
  Regua  Reguas[]
  Person Persons  @relation(fields: [responsible_id], references: [id])
}

model Persons {
  id                           Int       @id @default(autoincrement())
  ramo_id                      Int
  name                         String
  cpf_cnpj                     String    @unique
  email                        String    @unique
  score                        Int?
  ie                           String?
  phone                        String?
  sexo                         String?
  profissao                    String?
  estado_civil                 String?
  regime_de_bens               String?
  razao_social                 String?
  observacoes                  String?
  renda_mensal                 Float?
  comprometimento_renda_mensal Float?
  valor_patrimonio             Float?
  nascimento                   DateTime?
  casamento                    DateTime?
  constituicao                 DateTime?
  created_at                   DateTime? @default(now())
  updated_at                   DateTime? @updatedAt

  Enderecos                   Enderecos[]
  License                     Licenses?
  Ramos                       Ramos?                @relation(fields: [ramo_id], references: [id])
  DividaCredor                Dividas[]             @relation("CredorToDivida")
  DividaDevedor               Dividas[]             @relation("DevedorToDivida")
  HipotecaMutuario            Hipoteca[]            @relation("MutuarioHipoteca")
  HipotecaCredor              Hipoteca[]            @relation("CredorHipoteca")
  AlienacaoFiduciariaMutuario AlienacaoFiduciaria[] @relation("MutuarioAlienacaoFiduciaria")
  AlienacaoFiduciariaCredor   AlienacaoFiduciaria[] @relation("CredorAlienacaoFiduciaria")
  PenhorMutuario              Penhor[]              @relation("MutuarioPenhor")
  PenhorCredor                Penhor[]              @relation("CredorPenhor")
  AvalAvalista                Aval[]                @relation("AvalistaAval")
  AvalDevedor                 Aval[]                @relation("DevedorAval")
  FiancaFiador                Fianca[]              @relation("FiadorFianca")
  FiancaDevedor               Fianca[]              @relation("DevedorFianca")
  SeguroGarantiaSeguradora    SeguroGarantia[]      @relation("SeguradoraSeguroGarantia")
  SeguroGarantiaTomadorSeguro SeguroGarantia[]      @relation("TomadorSeguroSeguroGarantia")
  CartaDeCreditoEmitente      CartaDeCredito[]      @relation("EmitenteCartaDeCredito")
  CartaDeCreditoBeneficiario  CartaDeCredito[]      @relation("BeneficiarioCartaDeCredito")
  ChequeEmitente              Cheque[]              @relation("EmitenteCheque")
  ChequeBeneficiario          Cheque[]              @relation("BeneficiarioCheque")
  DuplicataEmitente           Duplicata[]           @relation("EmitenteDuplicata")
  DuplicataSacado             Duplicata[]           @relation("SacadoDuplicata")

  @@fulltext([name, cpf_cnpj, email])
}

model Enderecos {
  id         Int       @id @default(autoincrement())
  person_id  Int
  cep        String
  logradouro String?
  bairro     String?
  cidade     String?
  estado     String?
  numero     String?
  created_at DateTime? @default(now())
  updated_at DateTime? @updatedAt

  Person Persons @relation(fields: [person_id], references: [id])
}

model Ramos {
  id         Int       @id @default(autoincrement())
  name       String    @unique
  created_at DateTime? @default(now())
  updated_at DateTime? @updatedAt

  Persons Persons[]
}

model Users {
  id         Int       @id @default(autoincrement())
  license_id Int
  role_id    Int       @default(2)
  name       String
  email      String    @unique
  password   String
  avatar     String?
  active     Boolean   @default(true)
  created_at DateTime? @default(now())
  updated_at DateTime? @updatedAt

  License Licenses @relation(fields: [license_id], references: [id])
  Role    Roles    @relation(fields: [role_id], references: [id])
}

model Permissions {
  id         Int       @id @default(autoincrement())
  name       String
  route      String    @unique
  created_at DateTime? @default(now())
  updated_at DateTime? @updatedAt

  Roles Roles[]
}

model Roles {
  id         Int       @id @default(autoincrement())
  name       String    @unique
  created_at DateTime? @default(now())
  updated_at DateTime? @updatedAt

  Users       Users[]
  Permissions Permissions[]
}

model Dividas {
  id                     Int       @id @default(autoincrement())
  credor_id              Int
  devedor_id             Int
  tipo_garantia_id       Int?
  modo_constituicao_mora Int?
  status                 Int?
  multa                  Float?
  mora                   Float?
  valor_total_inicial    Float?
  observacoes            String?
  data_vencimento        DateTime?
  data_contratacao       DateTime?
  data_pagamento         DateTime?
  data_prescricao        DateTime?
  data_constituicao_mora DateTime?
  created_at             DateTime? @default(now())
  updated_at             DateTime? @updatedAt

  Credor            Persons             @relation("CredorToDivida", fields: [credor_id], references: [id])
  Devedor           Persons             @relation("DevedorToDivida", fields: [devedor_id], references: [id])
  TipoGarantia      TipoGarantia?       @relation(fields: [tipo_garantia_id], references: [id])
  TiposOperacoes    TiposOperacoes[]
  Indices           Indices[]
  StatusFaseDividas StatusFaseDividas[]
}

model Indices {
  id         Int       @id @default(autoincrement())
  nome       String
  valor      Float
  descricao  String?
  created_at DateTime? @default(now())
  updated_at DateTime? @updatedAt

  Dividas Dividas[]
}

model TipoGarantia {
  id   Int    @id @default(autoincrement())
  name String @unique

  Dividas Dividas[]
}

model ParcelasOperacao {
  id                 Int       @id @default(autoincrement())
  status_id          Int
  numero_parcela     Int
  ultima_atualizacao DateTime // ultima atualizacao de juros
  data_vencimento    DateTime
  data_pagamento     DateTime?

  Cheque         Cheque?
  Duplicata      Duplicata?
  StatusParcelas StatusParcelas @relation(fields: [status_id], references: [id])
}

model StatusParcelas {
  id   Int    @id @default(autoincrement())
  nome String

  ParcelasOperacao ParcelasOperacao[]
}

model TiposOperacoes {
  id        Int @id @default(autoincrement())
  divida_id Int

  Hipoteca            Hipoteca[]
  AlienacaoFiduciaria AlienacaoFiduciaria[]
  Penhor              Penhor[]
  Aval                Aval[]
  Fianca              Fianca[]
  SeguroGarantia      SeguroGarantia[]
  CartaDeCredito      CartaDeCredito[]
  Cheque              Cheque[]
  Duplicata           Duplicata[]
  Divida              Dividas               @relation(fields: [divida_id], references: [id])
}

model Hipoteca {
  id                    Int      @id @default(autoincrement())
  mutuario_id           Int
  credor_hipotecario_id Int
  descricao_bem_imovel  String
  valor_emprestimo      Float
  valor_avaliado_imovel Float
  data_vencimento       DateTime
  termos_condicoes      String

  TiposOperacoes    TiposOperacoes[]
  Mutuario          Persons          @relation("MutuarioHipoteca", fields: [mutuario_id], references: [id])
  CredorHipotecario Persons          @relation("CredorHipoteca", fields: [credor_hipotecario_id], references: [id])
}

model AlienacaoFiduciaria {
  id                   Int      @id @default(autoincrement())
  descricao_bem_movel  String
  valor_financiado     Float
  detalhes_bem_movel   String
  mutuario_id          Int
  credor_fiduciario_id Int
  data_vencimento      DateTime
  termos_condicoes     String

  TiposOperacoes TiposOperacoes[]
  Mutuario       Persons          @relation("MutuarioAlienacaoFiduciaria", fields: [mutuario_id], references: [id])
  Credor         Persons          @relation("CredorAlienacaoFiduciaria", fields: [credor_fiduciario_id], references: [id])
}

model Penhor {
  id                   Int      @id @default(autoincrement())
  descricao_bem_movel  String
  valor_emprestimo     Float
  detalhes_bem_movel   String
  mutuario_id          Int
  credor_penhorista_id Int
  data_vencimento      DateTime
  termos_condicoes     String

  TiposOperacoes TiposOperacoes[]
  Mutuario       Persons          @relation("MutuarioPenhor", fields: [mutuario_id], references: [id])
  Credor         Persons          @relation("CredorPenhor", fields: [credor_penhorista_id], references: [id])
}

model Aval {
  id                       Int    @id @default(autoincrement())
  avalista_id              Int
  devedor_id               Int
  valor_divida_avalizada   Float
  relacao_avalista_devedor String
  termos_condicoes         String

  TiposOperacoes TiposOperacoes[]
  Avalista       Persons          @relation("AvalistaAval", fields: [avalista_id], references: [id])
  Devedor        Persons          @relation("DevedorAval", fields: [devedor_id], references: [id])
}

model Fianca {
  id                     Int    @id @default(autoincrement())
  fiador_id              Int
  devedor_id             Int
  valor_divida_fiancada  Float
  relacao_fiador_devedor String
  termos_condicoes       String

  TiposOperacoes TiposOperacoes[]
  Fiador         Persons          @relation("FiadorFianca", fields: [fiador_id], references: [id])
  Devedor        Persons          @relation("DevedorFianca", fields: [devedor_id], references: [id])
}

model SeguroGarantia {
  id                      Int    @id @default(autoincrement())
  seguradora_id           Int
  tomador_seguro_id       Int
  valor_garantia_segurada Float
  termos_condicoes        String

  TiposOperacoes TiposOperacoes[]
  Seguradora     Persons          @relation("SeguradoraSeguroGarantia", fields: [seguradora_id], references: [id])
  TomadorSeguro  Persons          @relation("TomadorSeguroSeguroGarantia", fields: [tomador_seguro_id], references: [id])
}

model CartaDeCredito {
  id                  Int    @id @default(autoincrement())
  emitente_id         Int
  beneficiario_id     Int
  valor_carta_credito Float
  condicoes_liberacao String

  TiposOperacoes TiposOperacoes[]
  Emitente       Persons          @relation("EmitenteCartaDeCredito", fields: [emitente_id], references: [id])
  Beneficiario   Persons          @relation("BeneficiarioCartaDeCredito", fields: [beneficiario_id], references: [id])
}

model Cheque {
  id                        Int      @id @default(autoincrement())
  parcela_id                Int      @unique
  emitente_cheque_id        Int
  beneficiario_id           Int
  operacao_alinea_devolucao Int
  numero_cheque             Int
  banco                     Int
  agencia                   Int
  conta                     Int
  valor_cheque              Float
  data_emissao              DateTime
  data_vencimento           DateTime

  TiposOperacoes     TiposOperacoes[]
  ParcelasOperacao   ParcelasOperacao @relation(fields: [parcela_id], references: [id])
  EmitenteCheque     Persons          @relation("EmitenteCheque", fields: [emitente_cheque_id], references: [id])
  BeneficiarioCheque Persons          @relation("BeneficiarioCheque", fields: [beneficiario_id], references: [id])
}

model Duplicata {
  id                      Int      @id @default(autoincrement())
  parcela_id              Int      @unique
  emitente_duplicata_id   Int
  sacado_id               Int
  valor_duplicata         Float
  data_emissao            DateTime
  data_vencimento         DateTime
  detalhes_itens_servicos String

  TiposOperacoes    TiposOperacoes[]
  ParcelasOperacao  ParcelasOperacao @relation(fields: [parcela_id], references: [id])
  EmitenteDuplicata Persons          @relation("EmitenteDuplicata", fields: [emitente_duplicata_id], references: [id])
  Sacado            Persons          @relation("SacadoDuplicata", fields: [sacado_id], references: [id])
}

model Reguas {
  id         Int @id @default(autoincrement())
  license_id Int

  tipo_regua String  @default("cobranca")
  name       String
  active     Boolean @default(false)

  created_at DateTime? @default(now())
  updated_at DateTime? @updatedAt

  FasesRegua FasesRegua[]
  License    Licenses     @relation(fields: [license_id], references: [id], onDelete: Cascade)
}

model FasesRegua {
  id       Int     @id @default(autoincrement())
  regua_id Int
  fase     String
  cron     String
  mensagem String?
  duracao  Int
  inicio   Int
  active   Boolean @default(false)

  created_at DateTime? @default(now())
  updated_at DateTime? @updatedAt

  StatusFaseDividas StatusFaseDividas[]
  Regua             Reguas              @relation(fields: [regua_id], references: [id], onDelete: Cascade)
}

model StatusFaseDividas {
  id           Int     @id @default(autoincrement())
  divida_id    Int
  fase_id      Int
  active       Boolean @default(false)
  isCronActive Boolean @default(false)

  created_at DateTime? @default(now())
  updated_at DateTime? @updatedAt

  Divida    Dividas    @relation(fields: [divida_id], references: [id], onDelete: Cascade)
  FaseRegua FasesRegua @relation(fields: [fase_id], references: [id], onDelete: Cascade)
}
