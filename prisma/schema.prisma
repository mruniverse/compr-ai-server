datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch", "fullTextIndex"]
}

model Licenses {
  id             Int       @id @default(autoincrement())
  max_users      Int
  responsible_id Int       @unique
  created_at     DateTime? @default(now())
  updated_at     DateTime? @updatedAt

  Users  Users[]
  Person Persons @relation(fields: [responsible_id], references: [id])
}

model Persons {
  id                           Int       @id @default(autoincrement())
  ramo_id                      Int
  name                         String
  cpf_cnpj                     String    @unique
  email                        String    @unique
  ie                           String?
  phone                        String?
  sexo                         String?
  profissao                    String?
  nascimento                   DateTime?
  estado_civil                 String?
  regime_de_bens               String?
  casamento                    DateTime?
  razao_social                 String?
  constituicao                 DateTime?
  renda_mensal                 Float?
  comprometimento_renda_mensal Float?
  valor_patrimonio             Float?
  observacoes                  String?
  created_at                   DateTime? @default(now())
  updated_at                   DateTime? @updatedAt

  Enderecos     Enderecos[]
  License       Licenses?
  Ramos         Ramos?      @relation(fields: [ramo_id], references: [id])
  DividaCredor  Divida[]    @relation("CredorToDivida")
  DividaDevedor Divida[]    @relation("DevedorToDivida")

  @@fulltext([name, cpf_cnpj, email])
}

model Enderecos {
  id         Int       @id @default(autoincrement())
  person_id  Int
  cep        String?
  logradouro String?
  bairro     String?
  cidade     String?
  estado     String?
  numero     String?
  created_at DateTime? @default(now())
  updated_at DateTime? @updatedAt

  Person Persons @relation(fields: [person_id], references: [id])
}

model Ramos {
  id         Int       @id @default(autoincrement())
  name       String    @unique
  created_at DateTime? @default(now())
  updated_at DateTime? @updatedAt

  Persons Persons[]
}

model Users {
  id         Int       @id @default(autoincrement())
  license_id Int
  role_id    Int       @default(2)
  name       String
  email      String    @unique
  password   String
  avatar     String?
  active     Boolean   @default(true)
  created_at DateTime? @default(now())
  updated_at DateTime? @updatedAt

  License Licenses @relation(fields: [license_id], references: [id])
  Role    Roles    @relation(fields: [role_id], references: [id])
}

model Permissions {
  id         Int       @id @default(autoincrement())
  name       String
  route      String    @unique
  created_at DateTime? @default(now())
  updated_at DateTime? @updatedAt

  Roles Roles[]
}

model Roles {
  id         Int       @id @default(autoincrement())
  name       String    @unique
  created_at DateTime? @default(now())
  updated_at DateTime? @updatedAt

  Users       Users[]
  Permissions Permissions[]
}

model Divida {
  id                     Int    @id @default(autoincrement())
  credor_id              Int
  devedor_id             Int
  tipo_garantia          Int
  modo_constituicao_mora Int
  status                 Int
  multa                  Float
  mora                   Float
  valor_total_inicial    Float
  observacoes            String

  data_contratacao       DateTime
  data_pagamento         DateTime
  data_prescricao        DateTime
  data_constituicao_mora DateTime
  created_at             DateTime? @default(now())
  updated_at             DateTime? @updatedAt

  Credor  Persons @relation("CredorToDivida", fields: [credor_id], references: [id])
  Devedor Persons @relation("DevedorToDivida", fields: [devedor_id], references: [id])
}
